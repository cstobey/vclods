#! /bin/ksh
# Executes a VCLOD script (Variable Config, Locking, Operation, and Destination) as called by vclod_do_dir
# See the README for an overview of VCLODs.

# Argument validation -- Most is elsewhere
: ${VCLOD_BASE_DIR:?} ${1:?The full path of a file (or pseudofile) to process is a required positional argument}
: "${pIN_FILE:=$1}"
S=$([ "$(basename $1)" != "$1" ] && [[ $1 =~ ^/.* ]] && echo "$1" || echo "$(cd $(dirname "$1"); echo "$(pwd)/$(basename "$1")")") # get the absolute path

# respect local config file
set -a
INPUT_DIR="$(dirname "$S")"
[ -f "$INPUT_DIR/config" ] && . "$INPUT_DIR/config"
env | grep ^O_ | sed 's/^O_//' | . /dev/stdin # allow commandline overrides
set +a

cat "${VCLOD_BASE_DIR%/}"/{vclod_helpers,vclod_get_semaphore,vclod_stdio2log,connections/*} | . /dev/stdin || exit $?

ret=0
[ "$DEBUG_SHOULD_TIME_IT" == 1 ] && echo "[START] $S"
if [ -e "$S" ]; then
  [ -s "$S" ] || { echo >&2 The positional file argument must be a non-empty file; exit 1; }
  [[ $S =~ .*\.sh$ ]] && head -1 "$S" | grep '^#!' | grep -v 'ksh' | awk 'NR == 1 {print "[WARNING] This is a KSH framework, and the sh files are sourced, so only KSH dialects are supported. For others, use the .shebang."}' >&2

  cat "$S"
else
  cat
fi | vclod_operation "$S" 

[ "$DEBUG_SHOULD_TIME_IT" == 1 ] && echo "[FINISH] $S $ret"
exit $ret
