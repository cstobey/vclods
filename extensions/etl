#PIPE Preform advanced ETL operations based on a temp table definition with structured comments. Should be followed by .batch.(sql|dst).
fn=$(mktemp)
add_file_cleanup "$fn"
: "${ETL_EXT_DIR:=$INPUT_DIR}" # Directory to look for .etl temp table definition files
: "${ext_opt:=${ETL_EXT_FILE:=$base_filename}}" # temp table definition filename.

sed 's/--.*$//' "$ETL_EXT_DIR/$ext_opt" >"$fn" # handle fifos; -- are real comments
sed '/^ *#/ d;s/#.*$//' "$fn" # dont want to confuse other potential stream readers
tmp_tbl=$(grep -E '^CREATE (TEMPORARY |OR REPLACE )?TABLE' "$fn" | awk '$2~/^OR$/ {print $5} $2~/^TEMPORARY$/ {print $4} $2~/^TABLE$/ {print $3}') # TODO: ensure there is only one or handle multiple appropriately
ingest_fields=$(grep -E '#(map|ingest|unique)' "$fn" | grep -E -v '#(key|ignore|include)' | awk '{print $1}' | paste -sd',')
working_fields=$(grep -E "#(key|unique|generate_unique|mode|(sync|map|generate)(_no_update)?) " "$fn" | sed -r 's/^ +//;s/^([^# ]+ )[^#]*/\1/' | awk '/^[^#]/ {gsub(/#/, "\n"$1" #", $0)} 1' | grep -E "#(key|unique|sync|map|generate|mode)")
cat << EOF

#RESET
#start INSERT INTO $tmp_tbl ($ingest_fields) VALUES
EOF
cat # include the previous pipe's data

function sync_tbl { # TODO: get rid of the ALTER...AUTO_INCREMENT by decomposing ODKU so that the UPDATE is its own statement.
  tbl=$1
  shift
  echo "$working_fields" | grep -E "#[^ ]+ $tbl( |$)" | awk -v t="$tbl" -v tt="$tmp_tbl" '
function cc_ws(value, sep, new) {return (value=="") ? new : value sep new}
function cc_if(value, cond, true_str, false_str) {return (value=="") ? "" : (cond ? value true_str : value false_str);}
function tail() {ret=""; for (i=4; i<=NF; i++) ret=cc_ws(ret," ",$i); return ret}
function p(value) {if(value){print value;}}
function ext(msg) {should_exit=1; print msg > "/dev/stderr"; exit 1;}

function all(tt_f, t_f) {
  tc=cc_ws(tc, ",", t_f); 
  ttc=cc_ws(ttc, ",", tt_f);}
function all_uni(tt_f, t_f, use_tt) {
  tc_uni=cc_ws(tc_uni, ",", t_f); 
  ttc_uni=cc_ws(ttc_uni, ",", tt_f);
  ugb=cc_ws(ugb, ",", tt_f);
  w_s=cc_ws(w_s,""," AND "tt_f" IS NOT NULL");
  w=cc_ws(w, " AND ", (use_tt ? tt"." : "") tt_f"<=>"t"."t_f);}
function updatable(tt_f, t_f, use_tt) {
  odku=cc_ws(odku, ",", t_f"=IFNULL(VALUES("t_f"),"t_f")");
  uset=cc_ws(uset, ",", t"."t_f"=" (use_tt ? tt"." : "") tt_f);}

$1~/^#sync/ && $3=="SET_NOT_PRESENT" {snp=tail();snp=cc_if(snp,snp ~ /WHERE/, " AND ", " WHERE ");} 
$1~/^#sync/ && $3=="DELETE_NOT_PRESENT" {dnp=cc_if(tail(),1," AND ","")"\n  ";} 
$1~/^#sync_no_update$/ {no_update=1;}

$1~/^#mode$/ && $3~/^(odku_ai|ui_split)$/ {mode=$3}
$1~/^#mode$/ && $3~/^sparse$/ {use_sparse=1}

$1~/^#generate/ {all(tail(), $3);} # include _no_update and _unique
$2~/^#(map|unique)/ {all($1, $4);} # include _no_update
$1~/^#generate$/ {updatable(tail(), $3, 0);}
$2~/^#map$/ {updatable($1, $4, 1);}
$2~/^#unique$/ {all_uni($1, $4, 1);}
$1~/^#generate_unique$/ {all_uni(tail(), $3, 0);}

$2~/^#key$/ {if(f){ext("detected 2 surrogate keys for table "t);} nf=$1;f=$4;}

END {
  if (should_exit) {exit 1;}
  if (ugb) {ugb="\n  GROUP BY "ugb;}
  if (odku && !no_update) {odku="\n  ON DUPLICATE KEY UPDATE "odku;} else {ignore=" IGNORE";odku="";}
  u_to_on="UPDATE "t" JOIN "tt" ON ";
  if(!use_sparse) {w_s="";}
  if (f) {
    join_on=tt"."nf"="t"."f;
    u_get_f="UPDATE "t" JOIN "tt" ON "w" SET "join_on";";
    w_not_key="\n  WHERE "nf" IS NULL"w_s;
    row_not_in=f" NOT IN (SELECT "nf" FROM "tt");";
  } else {
    join_on=w;
    if (tc_uni) {
      row_not_in="ROW("tc_uni") NOT IN (SELECT "ttc_uni" FROM "tt");";
      w_not_key="\n  WHERE ROW("ttc_uni") NOT IN (SELECT "tc_uni" FROM "t")"w_s;}
  }
  uset=(!no_update && uset) ? u_to_on join_on" SET "uset";" : "";
  if (mode == "ui_split") {
    p(u_get_f);
    p(uset);
    p("INSERT INTO "t" ("tc")\n  SELECT "ttc"\n  FROM "tt w_not_key ugb ";");
  } else { # odku_ai
    if(no_update) {p(u_get_f);} else {w_not_key="";}
    p("INSERT"ignore" INTO "t" ("tc")\n  SELECT "ttc"\n  FROM "tt w_not_key ugb odku";");
    p("ALTER TABLE "t" AUTO_INCREMENT = 1;");
  }
  p(u_get_f);
  if(snp && row_not_in) {print "UPDATE "t" SET "snp row_not_in;};
  if(dnp && row_not_in) {print "DELETE FROM "t" WHERE "dnp row_not_in;};
}'
}
echo '#RESET'
grep -E -o '#(include|sync(_no_update)?) [^#]+' "$fn" | awk 'BEGIN {printf "cat <(echo)"} /^#include/ {printf " $ETL_EXT_DIR/"$2} /^#sync/ {printf " <(sync_tbl "$2")"}' | . /dev/stdin
