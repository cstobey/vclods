#FLOW Run multiple input rows in parallel. Retains all functions and args that are in the enviornment. Access the current line we are processing through $PARA_LINE.
: "${ext_opt:=${PARA_EXT_OPERATION:=sh-$base_filename}}" # what vclod_operation to use to process a line of stdin
: "${PARA_EXT_JOBS:=10}" # number of parallel jobs to run at the same time.
: "${PARA_EXT_STOP:=0}" # if 1, stop after we finish the currently started threads. You can set this on the fly in the config, as it is reloaded at the start of every thread.
_FIFO="${VCLOD_LOCK_DIR%/}/para.$MYPID.fifo" ; mkfifo "$_FIFO" ; exec 8<>"$_FIFO" ; add_file_cleanup "$_FIFO"
post_exit_trap 'for j in "$(jobs -p)";do kill -SIGINT "$j" 2>/dev/null;done;[ -n "$(jobs -p)" ] && wait'

# force stdbuf defaults without using the program... override below as needed
LD_PRELOAD=/usr/libexec/coreutils/libstdbuf.so; _STDBUF_I=0; _STDBUF_O='L'; _STDBUF_E='L'

stdbuf -i0 -o0 -e0 seq 1 "$PARA_EXT_JOBS" >&8
while read PARA_LINE || [ -n "$PARA_LINE" ] ; do # do not require a trailing newline in this context
  stdbuf -i0 -o0 -e0 read dummy <&8
  export PARA_LINE
  vclod_load_local_config ; [ "$PARA_EXT_STOP" != 1 ] || break
  ( export MYPID="$(exec sh -c 'echo $PPID')" ; printf '%s\n' "$PARA_LINE" | vclod_operation "para_$base_filename.$ext_opt" ; stdbuf -i0 -o0 -e0 printf 'a\n' >&8 ) &
done
[ -n "$(jobs -p)" ] && wait
