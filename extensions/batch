#PIPE aggregate input into batch SQL statements
awk -v RS="${ext_opt:-}\n" -v ORS="\n" '
function concat_ws(value, sep, new) {return (value=="") ? new : value sep new}
function tail() {ret=""; for (i=2; i<=NF; i++) ret=concat_ws(ret," ",$i); return ret}
function add_tail(value) {return concat_ws(value, " ", tail())}
function reset() {batch=1000;start=sep=end=del_start=del_sep=del_end=del_ids=""}

BEGIN {reset();offset=0}

/^#batch/ {batch=$2}
/^#start/ {start=add_tail(start); if(sep=="") sep=","; if(end=="") end=";"}
/^#sep/ {if(sep==",") sep=""; sep=add_tail(sep)}
/^#end/ {if(end==";") end=""; end=add_tail(end)}
/^#del_start/ {del_start=add_tail(del_start); if(del_sep=="") del_sep=","; if(del_end=="") del_end=");"}
/^#del_sep/ {if(del_sep==",") del_sep=""; del_sep=add_tail(del_sep)}
/^#del_end/ {if(del_end==");") del_end=""; del_end=add_tail(del_end)}
/^#/ {offset=offset+1}
/^$/ {offset=offset+1}

/^#RESET/ && (NR - offset) == 0 {reset();offset=NR}
/^#RESET/ && (NR - offset) > 0 {print end del_start del_ids del_end;reset();offset=NR}

/^[^#]/ && (NR - offset) == 1 {print start}
/^[^#]/ && (NR - offset) % batch == 1 && (NR - offset) != 1 {print end del_start del_ids del_end start;del_ids=""}
/^[^#]/ && (NR - offset) % batch != 1 {printf sep}
/^[^#]/ && del_start == "" {print}
/^[^#]/ && del_start != "" {print tail(); del_ids=concat_ws(del_ids, del_sep, $1)}

END {if((NR - offset) > 0) print end del_start del_ids del_end;}'

#CMD Breaks up the stream into sections delimited by the #RESET command. All commands are scoped to the current section. 
#TBL Command | default if start exists | description
#RESET | | reset to start state so you can start a new batch in the same pipe
#batch | 1000 | Number of lines to put in each batch
#start | | Start of statement (like INSERT INTO .... VALUES )
#sep | ',' | how to separate lines
#end | ';' | how to end lines
#del_start | | if desired, the start of a delete statement to be used in archiving data
#del_sep | ',' | delete statement separator
#del_end | ');' | delete statement end

# If #start is present, then batching is used for the current section. If #del_start is present, then the first word of each line is batched into the secondary batch statement defined by the del_ commands and emitted after the main query. This allows you to do something (like DELETE based on an id field) after the main query succeeds.
