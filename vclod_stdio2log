#! /bin/ksh
# Designed to be sourced into another script file.
# This file fulfills the vclod contract for a logging script. Example usages:
#
# 1) use the sourcing scripts first argument as the LOG_FILE:
# . <dir>/vclod_stdio2log
#
# 2) explicitly define a LOG_FILE as an enviornment variable:
# LOG_FILE="<some lock name>"
# . <dir>/vclod_stdio2log
#
# 3) explicitly define a LOG_FILE as a positional argument:
# . <dir>/vclod_stdio2log "<some lock name, possibley $0>"


# Argument validation
: ${LOG_FILE:=${1:?Missing a log file name}} ${LOG_BASE_DIR:?} ${VCLOD_ERR_DIR:?} ${RM_ERR_FILE:=1} ${MAIL_ELF:?}
[ -d "$LOG_BASE_DIR" ] && [ -w "$LOG_BASE_DIR" ] || { echo LOG_BASE_DIR must be an existing, writable directory; exit 1; }
[ -d "$VCLOD_ERR_DIR" ] && [ -w "$VCLOD_ERR_DIR" ] || { echo VCLOD_ERR_DIR must be an existing, writable directory; exit 1; }
[ -w "/dev/shm/" ] || { echo "/dev/shm/ must be a writable directory"; exit 1; }

LF="${LOG_BASE_DIR%/}/$(basename "$LOG_FILE").$$.log"   # Log File
ELF="${VCLOD_ERR_DIR%/}/$(basename "$LOG_FILE").$$.err"  # Error Log File
PELF="${LOG_BASE_DIR%/}/logging_post_process.$$.err" # Post Processing Error Log File
TLF=$([ "$IS_TERMINAL" -eq 1 ] && printf '/dev/stdout' || printf '/dev/null')
LOG_FIFO="/dev/shm/log.$$.fifo"
ERR_FIFO="/dev/shm/err.$$.fifo"
mkfifo "$LOG_FIFO" "$ERR_FIFO"
export LF ELF LOG_FILE
let FIRST_ERROR=1

ulimit -s unlimited  # log files might get large, need to let them float in however much memory is needed/available.

# The conditionals in there allows for application specific tagging of normal output
# If you keep it to 1 tag per line, then sql_logs will work wonderfully
# If you want to send warnings through stderr, override [ERROR] with [WARNING].
while IFS='' read -r line; do
  if [[ "$line" =~ [^[:space:]] ]]; then # ignore blank lines
    new_line="$$ $([[ $line =~ ^\[.* ]] || printf '[LOG] ')$line"
    logger "$new_line"
    echo "$(date +'%F %T') $new_line" | tee -a "$LF" >>"$TLF"
  fi
done < "$LOG_FIFO" &
OUT_PID=$!
while IFS='' read -r line; do
  if [[ "$line" =~ [^[:space:]] ]]; then # ignore blank lines
    new_line="$$ $([[ $line =~ ^\[.* ]] || printf '[ERROR] ')$line"
    logger "$new_line"
    [ $FIRST_ERROR -eq 1 ] && { echo "$$ $LOG_FILE" >>"$MAIL_ELF"; let FIRST_ERROR=0; }
    echo "$(date +'%F %T') $new_line" | tee -a "$ELF" "$MAIL_ELF" "$LF" >>"$TLF"
  fi
done < "$ERR_FIFO" &
ERR_PID=$!

logger_leave () {
  exec >"$PELF" 2>&1
  [ -n "$OUT_PID" ] && wait $OUT_PID
  [ -n "$ERR_PID" ] && wait $ERR_PID
  rm -f $LOG_FIFO $ERR_FIFO
  DIR_ERR_SHOULD_EXIT=0 DIR_EXT_DIR="$VCLOD_BASE_DIR" vclod_operation post.dir-post
  exec >&- 2>&-
  [ "$RM_ERR_FILE" == 1 ] && rm -f "$ELF"
  [ -s "$PELF" ] || rm -f "$PELF"  # remove if empty
}

exec >"$LOG_FIFO"
exec 2>"$ERR_FIFO"

# The sed is for cmd border safety. It also renders case statements unattainable. If this is a problem, just relax the sed.
trap "$(trap -p EXIT | sed -r 's/;+/;/g;s/^;//;s/;$//;s/(.)$/\1;/')logger_leave" EXIT
