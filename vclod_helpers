#! /bin/ksh
# helper functions
add_file_cleanup () { trap "rm -f $*$(trap -p EXIT | sed -r 's/;+/;/g;s/^;//;s/;$//;s/^(.)/;\1/')" EXIT; } # TODO: handle spaces?

literate_source () {
  # envsubst only does variable substitution
  # heredocs and quotes do variable substitution/expansion and process substitution
  # source (.) does the above and treats everything else as code too.
  # this function allows heredoc-level substitutions for any string.
  # the name comes from language systems that invert comments and code for executable blog posts (ie, like Literate Haskell)
  printf 'echo "%s"' "${@:-$(</dev/stdin)}" | . /dev/stdin
}

function urlen { while IFS='' read -n 1 c ; do [[ "$c" =~ [A-Za-z0-9.~_-] ]] && printf "$c" || printf '%%%02X' "'$c" ; done }

vclod_connection() {
  echo >&2 '[WARNING] vclod_connection is deprecated'
  echo $1
}
vclod_conn() {
  CONN_PREFIX=${1:=VCLOD_OVERRIDE_}
  ENGINE="$(printf 'echo ${%sENGINE:-${VCLOD_ENGINE:-mysql}}' "${CONN_PREFIX}" | . /dev/stdin | tr '[:upper:]' '[:lower:]')"
  [ -f "${VCLOD_BASE_DIR%/}/connections/$ENGINE" ] || { echo >&2 "Unknown engine type $ENGINE" ; exit 1 ; }
  CMD=$(printf "vclod_%s_connection %s\n" "$ENGINE" "$CONN_PREFIX")
  $CMD
}
vclod_conn_arg() {
  : ${1:?Need a Connection_Prefix} ${2:?Need an Engine} ${3:?Need to have an argument to generate in HOST, DB, USER, PASSWORD}

  ret_var=$(printf 'printf "%%s\n" "${%s%s:=${VCLOD_%s_%s:=$VCLOD_%s}}"\n' "$1" "$3" "$2" "$3" "$3" | . /dev/stdin)
  [ -z "$ret_var" ] && { echo >&2 "A $3 connection argument is required to use the .$ext extension (see docs for details)"; exit 1; }
  printf "$ret_var"
}


vclod_op(){
  next="${1%.*}"
  [[ "$1" == "$next" ]] && cat && return 0 # The cat connects stdin to stdout, note that the error case below does not. This should never happen.
  extension="${1##*.}"
  ext="${extension%%-*}"
  ext_opt="$([ "$extension" = "$ext" ] || echo "${extension#*-}")"
  ext_opt="${ext_opt//+/.}" ; ext_opt="${ext_opt//\.\./+}"
  base_filename="${1%%.*}"
  op_ext_file="${VCLOD_BASE_DIR%/}/extensions/$ext"
  test -f "$op_ext_file" || { echo "Unknown file type $ext" >&2 ; exit 99 ; }
  if [[ "$next" == "${next%.*}" ]] ; then
    . "$op_ext_file"
  else
    . "$op_ext_file" | vclod_op "$next"
  fi
}
function vclod_operation {
  typeset exit_err_msg="${VCLOD_EXIT_ERR:-$(basename "$1")}"
  typeset ret=0
  unset VCLOD_EXIT_ERR # force each layer to have its own error context.
  vclod_op "$(basename "$1")" || { ret=$?; echo >&2 "$exit_err_msg returned $ret"; }
  return $ret
}

export add_file_cleanup literate_source urlen vclod_conn vclod_conn_arg vclod_operation vclod_op
