#! /bin/ksh
# Ensures that at most N parallel batch jobs run for a particular lock. Processes beyond N abort (rather than
# blocking). Behavior depends upon VCLOD_BATCH_JOBS and LOCK_NAME; also uses VCLOD_LOCK_DIR. This file fulfills the
# vclod contract for a locking script.
#
# Usage: Designed to be sourced into another script file.
# Examples:
#
# 1) use the sourcing scripts first argument as the LOCK_NAME:
# . <dir>/vclod_get_semaphore
#
# 2) explicitly define a LOCK_NAME as an enviornment variable:
# LOCK_NAME="<some lock name>"
# . <dir>/vclod_get_semaphore
#
# 3) explicitly define a LOCK_NAME as a positional argument:
# . <dir>/vclod_get_semaphore "<some lock name, possibley $0>"

: "${VCLOD_LOCK_DIR:?}" # Where to put lock files. Generally /dev/shm
: "${LOCK_NAME:=${1:?Missing a lock name}}" # Only override if you want multiple scripts to lock each other out and you know what you are doing
: "${VCLOD_BATCH_JOBS:=1}" # How many instances of one script can be run at the same time
[ -d "$VCLOD_LOCK_DIR" ] || { echo VCLOD_LOCK_DIR must be an existing directory; exit; }
[ -w "$VCLOD_LOCK_DIR" ] || { echo VCLOD_LOCK_DIR must be a writable directory; exit; }
# LOCK_NAME can be explicitly defined, or be used as the first argument of the sourcing script. It is always basenamed.
#LOCK_NAME=`basename $LOCK_NAME`
LOCK_NAME="$(stat -c '%h %i' "$LOCK_NAME" 2>/dev/null | awk -v a="$(basename "$LOCK_NAME")" -v b="${LOCK_NAME//\//_}" '{n=$1;i=$2} END {if (n==1) print a"-"i; else print b;}')"

MY_LOCK=''
for i in 1 $(seq 2 $VCLOD_BATCH_JOBS) ; do
  LOCK_FILE="${VCLOD_LOCK_DIR%/}/${LOCK_NAME}.${i}.LCK"
  if [ -f "$LOCK_FILE" ] ; then
    ps -p "$(<"$LOCK_FILE")" >/dev/null && continue || { echo "Removing apparently false lock $LOCK_FILE"; rm -f "$LOCK_FILE"; }
  fi
  MY_LOCK="$LOCK_FILE"
done
[ ! -f "${MY_LOCK:?All $LOCK_NAME locks taken}" ] && [ "$(find "${VCLOD_LOCK_DIR%/}/" -name "${LOCK_NAME}.*.LCK" | wc -l)" -le "$VCLOD_BATCH_JOBS" ] && echo $MYPID >"$MY_LOCK" || exit 1

add_file_cleanup "$MY_LOCK"
