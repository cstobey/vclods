#! /bin/ksh
# Parses log messages from $LOG_FILE (program output) in $LF (the log file) and splits them to a database (LOG_SQL_DB).
# Rejected messages go to LF.sql_failed. Requires a program that outputs in this format:
# date time pid [tag] message...
# This script fulfills the VCLOD logger contract, but could technically work with any properly structured log file.

# Argument validation: LF is the actual log file. NOTE: most arguments have multiple names for legacy purposes.
: "${LOG_FILE:?}" "${LF:?}" # derived from includes/script.run_script()
: "${LOG_SQL_HOST:=} ${LOG_SQL_USER:=$LOG_USER} ${LOG_SQL_PASSWORD:=$LOG_PW} ${LOG_SQL_DB:=} ${LOG_SQL_ENGINE:=$LOG_ENGINE}" # Defines log2sql Post Processing db connection. Needs pp_log2sql_table.sql tables loaded.
: "${SHOULD_PP_LOG2SQL:=1}" # Set to 0 to turn off SQL queryable logs
[ -s "$LF" ] || return 0 # if the output file is empty, dont try to store it
[ -z "$LOG_SQL_HOST" ] && return 0 # only continue if we have somewhere to go
[ -z "$LOG_SQL_DB" ] && return 0 # only continue if we have somewhere to go
[ "$SHOULD_PP_LOG2SQL" -eq 0 ] && return 0 # escape hatch

sync "$LF"
export SRC=LOG_SQL_ ETL_EXT_DIR="$VCLOD_BASE_DIR" SQL_EXT_ENVSUBST=0

# Parse each line of a log file and ingest into the .etl_format. Expected format:
# (<date> <time>) <pid> [<tag>] (<message>... <optional_value>)
sed -r 's/"/\\"/g;s/\t/ /g;s#^(\S+\s+\S+)\s+(\S+)\s+(\[[^]]+\]|[^[] ]+)\s+(\S.*)$#("\1","\2","\3","'"$LOG_FILE"'","\4")#' "$LF" | vclod_operation pp_log2sql.sql.batch.etl-pp_etl_log2sql || cp "$LF" "$LF.sql_failed"
